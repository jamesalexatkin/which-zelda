{"version":3,"sources":["Console.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Console","name","imgSrc","ownedSystems","setOwnedSystems","useState","owned","setOwned","className","onClick","includes","copy","index","indexOf","splice","push","src","Game","playable","detail","style","whiteSpace","App","document","title","allGames","main_series","concat","spin_offs","allSystems","home_consoles","handhelds","getElByPropVal","arr","prop","val","i","length","isPlayable","systemsPlayableOn","ordered_systems","curSystem","systemObj","j","backwardsCompat","playableSystem","bcSystems","bcWith","k","isVariant","variantOf","getGameDetail","bcSystemObj","bcDetail","bcAlias","console","log","variantDetail","map","home_console","process","handheld","class","game","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.53872f79.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Console({name, imgSrc, ownedSystems, setOwnedSystems}) {\r\n\r\n    function handleClick() {\r\n        setOwned(!owned);\r\n\r\n        if (!(ownedSystems.includes(name))) {\r\n            const copy = [...ownedSystems];\r\n            copy.push(name);\r\n            setOwnedSystems(copy);\r\n        } else {\r\n            const copy = [...ownedSystems];\r\n            const index = copy.indexOf(name);\r\n            copy.splice(index, 1);\r\n            setOwnedSystems(copy);\r\n        }\r\n    }\r\n\r\n    const [owned, setOwned] = useState(false);\r\n\r\n    return (\r\n        <div className=\"card\" onClick={handleClick}>\r\n            <img className={owned ? \"img\" : \"img-gray\"} src={imgSrc}></img>\r\n            <div className=\"container\">\r\n                <h4>{owned ? name + \" ✅\" : name}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Console;","import React, { useState } from 'react';\r\n\r\nfunction Game({ name, imgSrc, playable, detail }) {\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <img className={playable ? \"img\" : \"img-gray\"} src={imgSrc}></img>\r\n      <div className=\"overlay\">\r\n        {/* whiteSpace property renders \\n from detail properly in HTML */}\r\n        <p style={{whiteSpace: \"pre-line\"}}>{detail}</p>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h4><b>{playable ? name + \" ✅\" : name}</b></h4>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game;","import React, { useState } from 'react';\r\n// import { Helmet } from 'react-helmet'\r\nimport './App.css';\r\nimport Console from './Console.js';\r\nimport Game from './Game.js';\r\nimport handhelds from './data/handhelds.json';\r\nimport home_consoles from './data/home_consoles.json';\r\nimport main_series from './data/main_series.json';\r\nimport spin_offs from './data/spin_offs.json';\r\nimport ordered_systems from './data/ordered_systems.json'\r\n\r\n\r\nfunction App() {\r\n\r\n  // Set page title\r\n  document.title = 'Which Zelda games can I play?';\r\n\r\n  const [ownedSystems, setOwnedSystems] = useState([]);\r\n  var allGames = main_series.concat(spin_offs);\r\n  var allSystems = home_consoles.concat(handhelds);\r\n\r\n  function getElByPropVal(arr, prop, val) {\r\n\r\n    for (var i = 0, length = arr.length; i < length; i++) {\r\n      if (arr[i][prop] == val) {\r\n        return arr[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  function isPlayable(name, allGames, ownedSystems) {\r\n    var gameObj = getElByPropVal(allGames, \"name\", name);\r\n\r\n    var playable = false;\r\n\r\n    const systemsPlayableOn = gameObj.systemsPlayableOn;\r\n\r\n    // Make sure we consider all systems in order\r\n    for (var i = 0; i < ordered_systems.length; i++) {\r\n      const curSystem = ordered_systems[i];\r\n\r\n      // Check that we own this system, otherwise nothing else matters\r\n      if (ownedSystems.includes(curSystem)) {\r\n        var systemObj = getElByPropVal(allSystems, \"name\", curSystem);\r\n\r\n        // 3 cases:\r\n        // 1. Game is playable in some fashion as it was released for that system\r\n        // 2. Game is playable as the console is a variant of a console for which 1. is true\r\n        // 3. Game is playable as the console provides backwards compatibility for a console for which 1. is true\r\n\r\n        // Case 1. - natively playable\r\n        for (var j = 0; j < systemsPlayableOn.length; j++) {\r\n          const playableSystem = systemsPlayableOn[j];\r\n          if (curSystem == playableSystem.name) {\r\n            playable = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // Case 2. - backwards compat\r\n        if (systemObj.backwardsCompat) {\r\n\r\n          for (var j = 0; j < systemsPlayableOn.length; j++) {\r\n            const playableSystem = systemsPlayableOn[j];\r\n\r\n            const bcSystems = systemObj.bcWith;\r\n\r\n            if (bcSystems.length > 0) {\r\n              for (var k = 0; k < bcSystems.length; k++) {\r\n                const bcSystemObj = bcSystems[k];\r\n\r\n                if (bcSystemObj == playableSystem.name) {\r\n                  playable = true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        // Case 3. - system variant\r\n        if (systemObj.isVariant === true) {\r\n          for (var j = 0; j < systemsPlayableOn.length; j++) {\r\n            const playableSystem = systemsPlayableOn[j];\r\n            if (systemObj.variantOf == playableSystem.name) {\r\n              playable = true; break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return playable;\r\n  }\r\n\r\n  function getGameDetail(name, allGames, ownedSystems) {\r\n    var gameObj = getElByPropVal(allGames, \"name\", name);\r\n\r\n    var detail = \"Playable on:\\n\";\r\n\r\n    const systemsPlayableOn = gameObj.systemsPlayableOn;\r\n\r\n    // Make sure we consider all systems in order\r\n    for (var i = 0; i < ordered_systems.length; i++) {\r\n\r\n      const curSystem = ordered_systems[i];\r\n\r\n      // Check that we own this system, otherwise nothing else matters\r\n      if (ownedSystems.includes(curSystem)) {\r\n\r\n        var systemObj = getElByPropVal(allSystems, \"name\", curSystem);\r\n\r\n        // 3 cases:\r\n        // 1. Game is playable in some fashion as it was released for that system\r\n        // 2. Game is playable as the console is a variant of a console for which 1. is true\r\n        // 3. Game is playable as the console provides backwards compatibility for a console for which 1. is true\r\n\r\n        // Case 1. - natively playable\r\n        for (var j = 0; j < systemsPlayableOn.length; j++) {\r\n          const playableSystem = systemsPlayableOn[j];\r\n          if (curSystem == playableSystem.name) {\r\n            const consoleDetail = \"• \" + playableSystem.name + \": \" + playableSystem.detail + \"\\n\";\r\n            detail += consoleDetail;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // Case 2. - backwards compat\r\n        if (systemObj.backwardsCompat) {\r\n\r\n          for (var j = 0; j < systemsPlayableOn.length; j++) {\r\n            const playableSystem = systemsPlayableOn[j];\r\n\r\n            const bcSystems = systemObj.bcWith;\r\n\r\n            if (bcSystems.length > 0) {\r\n              for (var k = 0; k < bcSystems.length; k++) {\r\n                const bcSystemObj = bcSystems[k];\r\n\r\n                if (bcSystemObj == playableSystem.name) {\r\n                  const bcObj = getElByPropVal(systemsPlayableOn, \"name\", bcSystemObj);\r\n                  const bcDetail = bcObj.detail;\r\n                  const consoleDetail = \"• \" + systemObj.name + \" (\" + systemObj.bcAlias[k] + \" B/C): \" + bcDetail + \"\\n\";\r\n                  detail += consoleDetail;\r\n                }\r\n              }\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n        // Case 3. - system variant\r\n        if (systemObj.isVariant === true) {\r\n          for (var j = 0; j < systemsPlayableOn.length; j++) {\r\n            const playableSystem = systemsPlayableOn[j];\r\n            if (systemObj.variantOf == playableSystem.name) {\r\n              console.log()\r\n              const variantObj = getElByPropVal(systemsPlayableOn, \"name\", systemObj.variantOf);\r\n              const variantDetail = variantObj.detail;\r\n              const consoleDetail = \"• \" + systemObj.name + \": \" + variantDetail + \"\\n\";\r\n              detail += consoleDetail;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return detail;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <h1>Which Zelda games can I play?</h1>\r\n\r\n      <p>Select which consoles you have below and we'll show you which Zelda games are available to you.</p>\r\n\r\n      <p>This includes:</p>\r\n\r\n      <ul>\r\n        <li>Original releases for a system</li>\r\n        <li>Ports and remasters</li>\r\n        <li>Titles playable due to&nbsp;\r\n          <div className=\"tooltip\"> backwards compatibility\r\n            <div className=\"tooltiptext\">Denoted by \"B/C\"</div>\r\n          </div>\r\n        </li>\r\n        <li>Virtual Console releases</li>\r\n      </ul>\r\n\r\n      <div>\r\n        <h2>Consoles</h2>\r\n\r\n        <h3>Home consoles</h3>\r\n\r\n        <div className=\"row\">\r\n          {home_consoles.map(home_console => (\r\n            <Console name={home_console.name} imgSrc={process.env.PUBLIC_URL + home_console.imgSrc} ownedSystems={ownedSystems} setOwnedSystems={setOwnedSystems} />\r\n          ))}\r\n        </div>\r\n\r\n        <h3>Handheld consoles</h3>\r\n\r\n        <div className=\"row\">\r\n          {handhelds.map(handheld => (\r\n            <Console name={handheld.name} imgSrc={process.env.PUBLIC_URL + handheld.imgSrc} ownedSystems={ownedSystems} setOwnedSystems={setOwnedSystems} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <div>\r\n        <h2>Games</h2>\r\n\r\n        <h3>Main series</h3>\r\n\r\n        <div class=\"row\">\r\n          {main_series.map(game => (\r\n            <Game name={game.name} imgSrc={process.env.PUBLIC_URL + game.imgSrc} playable={isPlayable(game.name, allGames, ownedSystems)} detail={getGameDetail(game.name, allGames, ownedSystems)} />\r\n          ))}\r\n        </div>\r\n\r\n        <h3>Spin-offs</h3>\r\n\r\n        <div class=\"row\">\r\n          {spin_offs.map(game => (\r\n            <Game name={game.name} imgSrc={process.env.PUBLIC_URL + game.imgSrc} playable={isPlayable(game.name, allGames, ownedSystems)} detail={getGameDetail(game.name, allGames, ownedSystems)} />\r\n          ))}\r\n        </div>\r\n\r\n      </div>\r\n\r\n\r\n      <footer>\r\n        <p>Game trademarks and copyrights are properties of their respective owners. Nintendo properties are trademarks of Nintendo. © 2020 Nintendo.</p>\r\n        <p>Console images courtesy of <a href=\"https://commons.wikimedia.org/wiki/User:Evan-Amos\">Evan Amos</a>, <a href=\"https://commons.wikimedia.org/wiki/File:New_Nintendo_3DS.png\">Philip Terry Graham</a>, <a href=\"https://commons.wikimedia.org/wiki/File:New_Nintendo_2ds_XL.png\">LBDMCOM12</a>. </p>\r\n        <p class=\"footer-p\">Website created by <a href=\"https://jamesatk.in\">James Atkin</a>. © JAMES ATKIN 2020. <a href=\"https://github.com/jamesalexatkin/which-zelda\">View on Github</a></p>\r\n      </footer>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}